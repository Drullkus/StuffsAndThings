buildscript {
    repositories {
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies { classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT' }
}

apply plugin: 'forge'
apply plugin: 'curseforge'

version = "$minecraft_version-$version"

minecraft {
    version = "$minecraft_version-$forge_version"
    //mappings = mcp_mappings_version
    runDir = "run"
}

repositories {
    maven { url "http://mobiusstrip.eu/maven" } // Waila
    maven { url "http://chickenbones.net/maven/" } // CodeChicken Stuff
}

dependencies {
    compile "codechicken:CodeChickenLib:$minecraft_version-$cclib_version:dev"
    compile "codechicken:CodeChickenCore:$minecraft_version-$ccc_version:dev"
    compile "codechicken:NotEnoughItems:$minecraft_version-$nei_version:dev"
    compile "mcp.mobius.waila:Waila:${waila_version}_$minecraft_version:dev"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "description", project.description

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand([
                'version'    : project.version,
                'mcversion'  : project.minecraft.version,
                'description': project.description
        ])

    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
    archives deobfJar
}

curse {
    dependsOn build
    onlyIf { return project.hasProperty('curseforge_key') }
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.curseforge_key
    }

    projectId = curseforge_project_id
    releaseType = 'release'

    additionalArtifact sourcesJar, javadocJar, deobfJar
}